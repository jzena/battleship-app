{"version":3,"sources":["store/game.js","App.js","reportWebVitals.js","store/index.js","index.js","store/auth.js"],"names":["levels","initialGameState","ships","cells","attemps","lost","win","totalShips","shipsSunk","undefined","hitStatus","records","finished","gameSlice","createSlice","name","initialState","reducers","startGame","state","action","payload","JSON","parse","updateGame","x","y","shipType","SHIP_STATUS","ship","coordinate","coordindates","numHits","HIT","length","Object","keys","forEach","coor","shipx","split","shipy","SUNK","FAIL","finishGame","push","id","level","hits","completed","resetGame","updateAttempts","Number","gameActions","actions","options","timeout","position","positions","TOP_RIGHT","AuthenticatedApp","React","UnauthenticatedApp","App","dispatch","useDispatch","getToken","authActions","login","isAuth","useSelector","auth","isAuthenticated","fallback","className","template","AlertTemplate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","game","gameReducer","authReducer","middleware","logger","devTools","process","ReactDOM","render","document","getElementById","localStorageKey","authSlice","window","localStorage","setItem","logout","removeItem","getItem"],"mappings":"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","file":"static/js/main.79fc3235.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\n\nconst levels = {\n  '': 'Level',\n  0: 'Easy',\n  100: 'Medium',\n  50: 'Hard',\n}\nconst initialGameState = {\n  ships: {},\n  cells: [],\n  attemps: 0,\n  lost: false,\n  win: false,\n  levels,\n  totalShips: 0,\n  shipsSunk: undefined,\n  hitStatus: undefined,\n  records: [],\n  finished: false,\n}\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState: initialGameState,\n  reducers: {\n    startGame(state, action) {\n      const {ships, cells, totalShips} = action.payload\n      state.ships = JSON.parse(ships)\n      state.cells = cells\n      state.totalShips = totalShips\n      state.hitStatus = undefined\n      state.win = false\n      state.lost = false\n      state.finished = false\n    },\n    updateGame(state, action) {\n      const {x, y, shipType, SHIP_STATUS} = action.payload\n      const ship = state.ships[shipType]\n      const cells = state.cells\n      let shipsSunk = state.shipsSunk || 0\n      const coordinate = `${x}-${y}`\n\n      if (ship && coordinate in ship.coordindates) {\n        ship.numHits += 1\n        ship.coordindates[coordinate] = true\n        cells[x][y] = SHIP_STATUS.HIT\n\n        // if ship is sunk\n        if (ship.numHits === ship.length) {\n          Object.keys(ship.coordindates).forEach(coor => {\n            const shipx = coor.split('-')[0]\n            const shipy = coor.split('-')[1]\n\n            cells[shipx][shipy] = SHIP_STATUS.SUNK\n          })\n          shipsSunk += 1\n        }\n      } else {\n        cells[x][y] = SHIP_STATUS.FAIL\n      }\n\n      state.cells = cells\n      state.ships[shipType] = ship\n      state.shipsSunk = shipsSunk\n      state.hitStatus = cells[x][y]\n    },\n    finishGame(state, action) {\n      state.records.push({\n        id: state.records.length + 1,\n        level: `${levels[state.attemps]} - ${state.attemps}`,\n        hits: action.payload.hits,\n        completed: true,\n      })\n      state.win = action.payload.win\n      state.finished = true\n    },\n    resetGame(state, action) {\n      state.ships = {}\n      state.cells = []\n      state.shipsSunk = undefined\n      state.hitStatus = undefined\n      state.finished = false\n    },\n    updateAttempts(state, action) {\n      state.attemps = Number(action.payload)\n    },\n  },\n})\n\nexport const gameActions = gameSlice.actions\n\nexport default gameSlice.reducer\n","import './App.css'\nimport * as React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { positions, Provider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\nimport { authActions, getToken } from './store/auth'\n\nconst options = {\n  timeout: 5000,\n  position: positions.TOP_RIGHT,\n}\n\nconst AuthenticatedApp = React.lazy(() => import('./authenticated-app'))\nconst UnauthenticatedApp = React.lazy(() => import('./unauthenticated-app'))\n\nfunction App() {\n  const dispatch = useDispatch()\n  const token = getToken()\n  if (token) {\n    dispatch(authActions.login())\n  }\n  const isAuth = useSelector(state => state.auth.isAuthenticated)\n\n  return (\n    <React.Suspense fallback={ <div>loading...</div> }>\n      <div className=\"App\">\n        <Provider template={ AlertTemplate } { ...options }>\n          { isAuth ? <AuthenticatedApp /> : <UnauthenticatedApp /> }\n        </Provider>\n      </div>\n    </React.Suspense>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\n\nimport authReducer from './auth'\nimport gameReducer from './game'\n\nconst store = configureStore({\n  reducer: {\n    game: gameReducer,\n    auth: authReducer,\n  },\n  middleware: [logger],\n  devTools: process.env.NODE_ENV !== 'production',\n})\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport store from './store/index'\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import {createSlice} from '@reduxjs/toolkit'\n\nconst localStorageKey = '__auth_provider_token__'\nconst initialAuthState = {\n  isAuthenticated: false,\n}\n\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      window.localStorage.setItem(localStorageKey, true)\n      state.isAuthenticated = true\n    },\n    logout(state) {\n      window.localStorage.removeItem(localStorageKey)\n      state.isAuthenticated = false\n    },\n  },\n})\n\nexport function getToken() {\n  return window.localStorage.getItem(localStorageKey)\n}\n\nexport const authActions = authSlice.actions\n\nexport default authSlice.reducer\n"],"sourceRoot":""}